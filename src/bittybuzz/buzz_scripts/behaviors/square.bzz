include "vec2.bzz" # This file is from the buzz "standard library". It's included with the compiler
include "utils/executor.bzz"
include "utils/types.bzz"

# Lennard-Jones parameters
TARGET_KIN     = 2.830
EPSILON_KIN    = 1.500
TARGET_NONKIN  = 2.000
EPSILON_NONKIN = 1.000

# Lennard-Jones interaction magnitude
function lj_magnitude(dist, target, epsilon) {
    var td_ratio = target/dist;
    var ratio = -(epsilon / dist) * (math.pow(td_ratio, 4) - math.pow(td_ratio, 2))
    if(ratio > 0){ # If too far, return 1/ratio. So the farther they are, the higher the force will be
        return 0.01/ratio # so the pull force doesn't overwhelmed the push and avoid oscillations
    }
    return ratio # If too close, return ratio
}

# Accumulator function
function lj_vector_accum(rid, vect, accum) {
    return math.vec2.add(vect, accum);
}

# Neighbor data to LJ interaction vector
function lj_vector_kin(rid, data) {
    return math.vec2.newp(lj_magnitude(data.distance, TARGET_KIN, EPSILON_KIN), data.azimuth)
}
 
# Neighbor data to LJ interaction vector
function lj_vector_nonkin(rid, data) {
    return math.vec2.newp(lj_magnitude(data.distance, TARGET_NONKIN, EPSILON_NONKIN), data.azimuth)
}
 
function goto(x, y) {
    call_host_function(id, "moveBy", {.0 = x, .1 = y});
}

function is_kin_lj_vector(robot_id, data){
    if((robot_id % 2) == (id % 2)){
        return lj_vector_kin(robot_id, data)
    }
    return lj_vector_nonkin(robot_id, data);
}

# Calculates and actuates the flocking interaction
function square() {
    # Calculate the vector
    var accum = neighbors.map(is_kin_lj_vector).reduce(lj_vector_accum, math.vec2.new(0.0, 0.0))

    # Scaling vector
    if (neighbors.count() > 0) {
        math.vec2.scale(accum, 1.0 / neighbors.count())
    }
    # Prevents going out of the world in simulation
    if(math.vec2.length(accum) > 5){
        accum = math.vec2.norm(accum);
    }

    # Add a tolerence to prevent perpetual moving
    log("Vector length: ", math.vec2.length(accum));
    if(math.vec2.length(accum) > 0.5){
        log("Moving to X: ", accum.x, " Y: ", accum.y);
        goto(accum.x, accum.y)
    } else {
        log("Stopping");
        goto(0.0, 0.0)
    }
}

# Executed every time step
function tick(ctx) {
    square();
}

# Executed at init time
function create_exec(delay_ms) {
    exec = executor.new_ms(delay_ms, tick, nil);
    return exec;

}
