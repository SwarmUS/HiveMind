include "vec2.bzz" # This file is from the buzz "standard library". It's included with the compiler
include "utils/executor.bzz"
include "utils/types.bzz"

TARGET = 2.830
EPSILON = 1.500

# Lennard-Jones interaction magnitude
function lj_magnitude(dist, target, epsilon) {
    var td_ratio = target/dist;
    var ratio = -(epsilon / dist) * (math.pow(td_ratio, 12) - math.pow(td_ratio, 6))
    log("Ratio: ", ratio)
    if(ratio > 0 and ratio < 0.05){
        log("Retun ", 1/ratio)
        return 1/ratio
    }
    log("Retun ", ratio)
    return ratio
}

# Accumulator function
function lj_vector_accum(rid, vect, accum) {
    return math.vec2.add(vect, accum);
}

# Neighbor data to LJ interaction vecor
function lj_vector(rid, data) {
    return math.vec2.newp(lj_magnitude(data.distance, TARGET, EPSILON), data.azimuth)
}

function goto(x, y) {
    call_host_function(id, "moveBy", {.0 = x, .1 = y});
}

# Calculates and actuates the flocking interaction
function hexagon() {

    # Calculate the vector
    var accum = neighbors.map(lj_vector).reduce(lj_vector_accum, math.vec2.new(0.0, 0.0))

    # Scaling vector
    if (neighbors.count() > 0) {
        math.vec2.scale(accum, 1.0 / neighbors.count())
    }
    # Prevents going out of the world in simulation
    if(math.vec2.length(accum) > 5){
        accum = math.vec2.norm(accum);
        math.vec2.scale(accum, 5.0)
    }

    log("Moving to X: ", accum.x, " Y: ", accum.y);
    goto(accum.x, accum.y)
}

# Executed every time step
function tick(ctx) {
    hexagon();
}

# Executed at init time
function create_exec(delay_ms) {
    exec = executor.new_ms(delay_ms, tick, nil);
    return exec;

}
