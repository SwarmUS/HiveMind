include "utils/executor.bzz"
include "utils/types.bzz"
include "vec2.bzz"

leader = nil

function tick(stig){
    if(leader != id and leader != nil){
        log("Trying to get leader: ", leader)
        var leaderObj = neighbors.get(leader)
        var validMove = 1;

        neighbors.foreach(function (robotId, data) {
            if (robotId != leader) {
                var x = leaderObj.azimuth - data.azimuth

                if (math.abs(x) <= 10 and data.distance < 1.5)
                {
                    log("Invalid move. ", robotId, " in the way at dist: ", data.distance, " angle: ", data.azimuth)
                    validMove = nil
                }
            }
        })

        if(is_table(neighbor) and validMove){
            var goal = math.vec2.newp(leaderObj.distance - 1, leaderObj.azimuth)
            log("Moving to leader: ", leader, " at x:", goal.x, " y:", goal.y)
            call_host_function(id, "moveBy", {.0 = goal.x, .1 = goal.y})
        }
        else{
            log("Neighbor not found!")
        }
    }
    update_leader_exec.step()
}

function update_leader(stig){
    leader = stig.get("leader")
    if (leader){
        ui.set_hex(leader)
    }
}

function create_exec(step_count) {
    var stig = stigmergy.create(1)

    var set_leader_id_description = {.0 = {.leader_id=types.INT}}
    var set_leader_id = function(leader_id){
        log("Setting stig")
        self.stig.put("leader", leader_id)
    }
    register_closure("setLeader", set_leader_id, set_leader_id_description, {.stig = stig})

    update_leader_exec = executor.new(20, update_leader, stig)

    exec = executor.new(step_count, tick, stig)
    return exec
}
