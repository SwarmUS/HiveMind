include "utils/executor.bzz"
include "utils/types.bzz"
include "vec2.bzz"

leader = nil

MAX_LOS_ANGLE = 50.0

function tick_follow_leader(stig){
    if(leader != id and leader != nil){
        log("Trying to get leader: ", leader)
        leader_obj = neighbors.get(leader) # Global to be accessible in filter
        if (istable(leader_obj)){
            if(leader_obj.distance > 1.25){
                # Getting neighbors in LOS
                var obstructing_neighbors = neighbors.filter(function(rid, data){
                        if(rid != leader and data.distance < 1){
                            return true
                        }
                        return false

                    })

                # Cummulating the avoidance vector
                var avoidance_vec = obstructing_neighbors.reduce(function(rid, data, accum){
                        var vec_length = -1/math.pow(data.distance, 1.5)
                        var vec = math.vec2.newp(vec_length, data.azimuth)
                        return math.vec2.add(vec, accum);
                    },
                    math.vec2.new(0.0, 0.0))

                # Goal to the leader and add the avoidance vector
                var goal = math.vec2.newp(leader_obj.distance, leader_obj.azimuth)

                if(math.vec2.length(goal) > 1){
                    goal = math.vec2.norm(goal)
                }

                goal = math.vec2.add(goal, avoidance_vec)
                goal = math.vec2.norm(goal)

                log("Avoidance vector: X ", avoidance_vec.x, " Y: ", avoidance_vec.y)
                log("Moving towards leader via: ", leader, " at x:", goal.x, " y:", goal.y)
                call_host_function(id, "moveBy", {.0 = goal.x, .1 = goal.y})
            }
            else {
                call_host_function(id, "moveBy", {.0 = 0.0, .1 = 0.0})
            }
        }
        else{
            log("Neighbor not found!")
        }
    }
}

function tick_update_leader(stig){
    leader = stig.get("leader")
    if (leader){
        ui.set_hex(leader)
    }
}

function create_exec(delay_ms) {
    var stig = stigmergy.create(1)

    # Setting the leader via callback
    var set_leader_id_description = {.0 = {.leader_id=types.INT}}
    var set_leader_id = function(leader_id){
        log("Setting stig")
        self.stig.put("leader", leader_id)
    }
    register_closure("setLeader", set_leader_id, set_leader_id_description, {.stig = stig})

    # Creating exec
    var follow_leader_exec = executor.new_ms(delay_ms, tick_follow_leader, stig)
    var update_leader_exec = executor.new_ms(4*delay_ms, tick_update_leader, stig) # Refresh leader slower than following it

    # Merging in a collection
    var exec_collection = executor_collection.new()
    exec_collection.append(follow_leader_exec)
    exec_collection.append(update_leader_exec)

    return exec_collection
}
