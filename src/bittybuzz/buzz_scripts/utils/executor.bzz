# Class to allow a number of step before executing a closure
executor = {
    # Class constructor in step count
    # steP_count: number of step count before the call of the exec
    # closure: the closure to execute after x step_count, takes one argument, the context
    # context: context to pass to the closure
    .new = function(step_count, closure, context) {
        return {
            .m_step_count = step_count,
            .m_current_step = 0,
            .m_closure = closure,
            .m_context = context,
            .step = executor.step
        }
    },

    # Class constructor in ms
    # delay: delay in ms between each call of the exec
    # closure: the closure to execute after x step_count, takes one argument, the context
    # context: context to pass to the closure
    .new_ms = function(delay, closure, context) {
        var step_count = math.roundi(delay/VM_STEP_DELAY_MS)
        return executor.new(step_count, closure, context)
    },

    # Step the executor once
    .step = function() {
        if (self.m_current_step >= self.m_step_count) {
            self.m_current_step = 0
            self.m_closure(self.m_context)
        }
        self.m_current_step = self.m_current_step + 1
    }
}

# Allows to step multiple executor
executor_collection = {

    .m_step_callback = function(exec_collection){
        foreach(exec_collection, function(key, value){
                value.step()
            })
    },

    # Creates a new collection of executor
    .new = function(){
        var collection = {}
        var exec = executor.new(1, executor_collection.m_step_callback, collection)
        exec.append = executor_collection.append # Add the append function
        return exec
    },

    # Appends an executor to the collection
    # executor: the executor to append
    .append = function(executor){
        var collection_size = size(self.m_context)
        self.m_context[collection_size] = executor
    }
}
